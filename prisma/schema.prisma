// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
  MODERATOR
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  clientKey    String   @unique @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(cuid())
  username              String                 @unique @default(cuid())
  name                  String
  verified              Boolean                @default(false)
  description           String?
  color                 String?                @default("blue")
  avatar                String?
  image                 String?
  url                   String?
  location              String?
  email                 String?                @unique
  emailVerified         DateTime?
  created_at            DateTime               @default(now())
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  sessions              Session[]
  subscriptions         Subscription[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Subscription {
  id                 String           @id @default(cuid())
  userId             String
  subscriptionPlanId Int
  startDate          DateTime         @default(now())
  endDate            DateTime?
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
}

model SubscriptionPlan {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  price         Float
  subscriptions Subscription[]
}
